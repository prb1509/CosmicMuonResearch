# Macro file for the visualization setting in the initialization phase 
# of muonSim when running in interactive mode
#
# Use these open statements to open selected visualization
#
# Use this open statement to create an OpenGL view:
/vis/open OGL
#
# Use this open statement to create an OpenInventor view:
#/vis/open OI
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointVector 1 1 1
/vis/viewer/set/lightsVector -1 0 0
#
# Specify style (surface, wireframe, auxiliary edges,...)
#/vis/viewer/set/style wireframe
#/vis/viewer/set/auxiliaryEdge true
#/vis/viewer/set/lineSegmentsPerCircle 100
#
#Set particle (if gun and not gps)
#/gun/particle mu-
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
#/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only electrons
/vis/filtering/trajectories/create/particleFilter
/vis/filtering/trajectories/particleFilter-0/add e-
#
# To invert the above, drawing all particles except electrons
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: mu- is red by default):
/vis/modeling/trajectories/list
/vis/modeling/trajectories/drawByParticleID-0/set mu- pink
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Axes, scale, etc.
#/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes 0.6 0 0 0.2 m    # Simple axes: x=red, y=green, z=blue.
/vis/scene/add/eventID # Drawn at end of event
#
# Frame
/vis/set/colour magenta
/vis/set/lineWidth 2
/vis/scene/add/frame   # Simple frame around the view
/vis/set/colour        # Revert to default colour (white)
/vis/set/lineWidth     # Revert to default line width (1.)
#
# Colouring and setting opacity of volumes
# Make the "World" box invisible
/vis/geometry/set/visibility World 0 false
/vis/geometry/set/colour Trap 0 0.45 0.25 0 .05 #Brown
/vis/geometry/set/colour Hollow 0 0.5 0.5 0.5 .15 #Grey/Gray
#/vis/geometry/set/visibility Hollow 0 false
/vis/geometry/set/colour Gold 0 1 1 0 0.4 #Yellow
#/vis/geometry/set/colour Detector 0 0.2 0.2 1 0.04 #Green
#/vis/geometry/set/visibility Detector 0 false
#/vis/viewer/set/style surface
#/vis/viewer/set/hiddenMarker true
#/vis/viewer/set/viewpointThetaPhi 120 150
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush